{"ast":null,"code":"// src/useInView.js\nimport{useEffect,useState,useRef}from'react';export default function useInView(options){const ref=useRef();const[inView,setInView]=useState(false);useEffect(()=>{const observer=new IntersectionObserver(_ref=>{let[entry]=_ref;setInView(entry.isIntersecting);},options);if(ref.current)observer.observe(ref.current);return()=>{if(ref.current)observer.unobserve(ref.current);};},[ref,options]);return[ref,inView];}","map":{"version":3,"names":["useEffect","useState","useRef","useInView","options","ref","inView","setInView","observer","IntersectionObserver","_ref","entry","isIntersecting","current","observe","unobserve"],"sources":["J:/Home/Projects/Code/PNRASite/PNRA/frontend/src/useInView.js"],"sourcesContent":["// src/useInView.js\r\nimport { useEffect, useState, useRef } from 'react';\r\n\r\nexport default function useInView(options) {\r\n  const ref = useRef();\r\n  const [inView, setInView] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => {\r\n        setInView(entry.isIntersecting);\r\n      },\r\n      options\r\n    );\r\n    if (ref.current) observer.observe(ref.current);\r\n    return () => {\r\n      if (ref.current) observer.unobserve(ref.current);\r\n    };\r\n  }, [ref, options]);\r\n\r\n  return [ref, inView];\r\n}\r\n"],"mappings":"AAAA;AACA,OAASA,SAAS,CAAEC,QAAQ,CAAEC,MAAM,KAAQ,OAAO,CAEnD,cAAe,SAAS,CAAAC,SAASA,CAACC,OAAO,CAAE,CACzC,KAAM,CAAAC,GAAG,CAAGH,MAAM,CAAC,CAAC,CACpB,KAAM,CAACI,MAAM,CAAEC,SAAS,CAAC,CAAGN,QAAQ,CAAC,KAAK,CAAC,CAE3CD,SAAS,CAAC,IAAM,CACd,KAAM,CAAAQ,QAAQ,CAAG,GAAI,CAAAC,oBAAoB,CACvCC,IAAA,EAAa,IAAZ,CAACC,KAAK,CAAC,CAAAD,IAAA,CACNH,SAAS,CAACI,KAAK,CAACC,cAAc,CAAC,CACjC,CAAC,CACDR,OACF,CAAC,CACD,GAAIC,GAAG,CAACQ,OAAO,CAAEL,QAAQ,CAACM,OAAO,CAACT,GAAG,CAACQ,OAAO,CAAC,CAC9C,MAAO,IAAM,CACX,GAAIR,GAAG,CAACQ,OAAO,CAAEL,QAAQ,CAACO,SAAS,CAACV,GAAG,CAACQ,OAAO,CAAC,CAClD,CAAC,CACH,CAAC,CAAE,CAACR,GAAG,CAAED,OAAO,CAAC,CAAC,CAElB,MAAO,CAACC,GAAG,CAAEC,MAAM,CAAC,CACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}